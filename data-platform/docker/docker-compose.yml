# -*- coding: utf-8 -*-
# Version: 1.0
# Auteur: David Ouagne
# Description: Infrastructure Data conteneurisée pour données de santé

# Réseau personnalisé pour isolation et sécurité
networks:
  health_data_platform_network:
    driver: bridge
    name: health_data_platform_network
    labels:
      description: "Réseau isolé pour l'infrastructure EHR PostgreSQL"

# Volumes persistants pour données
volumes:
  postgres_data:
    driver: local
    name: health_data_platform_postgres_data
    labels:
      description: "Volume persistant pour données PostgreSQL"
  postgres_logs:
    driver: local
    name: health_data_platform_postgres_logs
    labels:
      description: "Volume pour logs PostgreSQL"
  minio-data:
    driver: local
    name: health_data_platform_minio_data
    labels:
      description: "Volume pour data Minio"

services:
  # Service PostgreSQL 16 avec support français complet
  postgres:
    image: postgres:16
    container_name: health_data_platform_db_postgres
    hostname: data-platform-db-postgres
    
    # Configuration des variables d'environnement depuis .env
    env_file:
      - .env
    environment:
      # Configuration PostgreSQL de base
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres_123}

      - EHR_DB=${EHR_DB:-ehr}
      - EHR_USER=${EHR_USER:-ehr_user}
      - EHR_PASSWORD=${EHR_PASSWORD:-ehr_user_123}

      - HAPI_DB=${HAPI_DB:-hapi}
      - HAPI_USER=${HAPI_USER:-hapi_user}
      - HAPI_PASSWORD=${HAPI_PASSWORD:-hapi_user_123}

      # TRANSFORM LAYER
      - TRANSFORM_DB=${TRANSFORM_DB:-transform_layer}
      - TRANSFORM_USER=${TRANSFORM_USER:-transform_user}
      - TRANSFOM_PASSWORD=${TRANSFOM_PASSWORD:-transform_user_123}

      # SEMANTIC LAYER
      - SEMANTIC_DB=${SEMANTIC_DB:-semantic_layer}
      - SEMANTIC_USER=${SEMANTIC_USER:-semantic_user}
      - SEMANTIC_PASSWORD=${SEMANTIC_PASSWORD:-semantic_user_123}
      
      # Configuration locale UTF-8 (compatible avec tous les conteneurs)
      - LANG=C.UTF-8
      - LANGUAGE=C.UTF-8
      - LC_ALL=C.UTF-8
      - LC_COLLATE=C.UTF-8
      - LC_CTYPE=C.UTF-8
      - LC_MESSAGES=C.UTF-8
      - LC_MONETARY=C.UTF-8
      - LC_NUMERIC=C.UTF-8
      - LC_TIME=C.UTF-8
      
      # Configuration PostgreSQL spécifique avec UTF-8
      - POSTGRES_INITDB_ARGS=--locale=C.UTF-8 --encoding=UTF8 --lc-collate=C.UTF-8 --lc-ctype=C.UTF-8
      - PGDATA=/var/lib/postgresql/data/pgdata
      
      # Optimisations PostgreSQL pour environnement français
      - POSTGRES_HOST_AUTH_METHOD=md5
    
    # Mapping des ports - 5433 sur l'hôte pour éviter les conflits
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    
    # Volumes pour persistance et configuration
    volumes:
      # Données PostgreSQL persistantes
      - postgres_data:/var/lib/postgresql/data
      
      # Scripts d'initialisation (exécutés dans l'ordre alphabétique)
      - ./init:/docker-entrypoint-initdb.d:ro
      
      # Logs PostgreSQL - utilisation des logs standards Docker
      # - postgres_logs:/var/lib/postgresql/logs
      
      # Configuration PostgreSQL personnalisée
      #- ./config/postgresql.conf:/usr/share/postgresql/postgresql.conf.sample:ro
    
    # Commande personnalisée avec optimisations françaises
    command: >
      postgres
      -c shared_preload_libraries='pg_stat_statements'
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c log_statement=mod
      -c log_duration=on
      -c log_min_duration_statement=1000
      -c logging_collector=off
      -c lc_messages='C.UTF-8'
      -c lc_monetary='C.UTF-8'
      -c lc_numeric='C.UTF-8'
      -c lc_time='C.UTF-8'
      -c default_text_search_config='french'
    
    # Vérification de santé PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres} -h localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Politique de redémarrage
    restart: unless-stopped
    
    # Limites de ressources (ajustables selon l'environnement)
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Réseau
    networks:
      - health_data_platform_network
    
    # Labels pour documentation et gestion
    labels:
      - "traefik.enable=false"
      - "description=Base de données PostgreSQL pour système HEALTH DATA platform"
      - "environment=development"
      - "version=1.0"
      - "maintainer=EHR Team"
      - "locale=fr_FR.UTF-8"
      - "encoding=UTF-8"
      - "collation=french"
    
    # Configuration de sécurité
    security_opt:
      - no-new-privileges:true
    
    # Variables d'environnement supplémentaires pour optimisation française
    tmpfs:
      - /tmp:size=1G,mode=1777
      - /var/run/postgresql:size=100M,mode=0755

  # Service pgAdmin pour administration web
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: health_data_platform_pgadmin
    hostname: data-platform-pgadmin
    
    # Configuration pgAdmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@ehr.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    
    # Port pgAdmin
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    
    # Volumes pour configuration pgAdmin
    #volumes:
    #  - ./config/servers.json:/pgadmin4/servers.json:ro
    #  - ./config/pgpass:/pgpass:ro
    
    # Dépendance PostgreSQL
    depends_on:
      postgres:
        condition: service_healthy
    
    # Réseau
    networks:
      - health_data_platform_network
    
    # Politique de redémarrage
    restart: unless-stopped
    
    # Labels
    labels:
      - "description=Interface d'administration pgAdmin pour PostgreSQL"
      - "environment=development"
      - "version=latest"
    
    # Profil pour activation optionnelle
    profiles:
      - full

  hapi:
    image: hapiproject/hapi:v8.4.0-2
    container_name: health_data_platform_hapi
    hostname: api-fhir-hapi
    restart: on-failure

    # Configuration des variables d'environnement depuis .env
    env_file:
      - .env

    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://data-platform-db-postgres:5432/hapi"
      SPRING_DATASOURCE_USERNAME: ${HAPI_USER:-hapi_user}
      SPRING_DATASOURCE_PASSWORD: ${HAPI_PASSWORD:-hapi_user_123}
      SPRING_DATASOURCE_DRIVERCLASSNAME: "org.postgresql.Driver"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: "ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgresDialect"
      HAPI_FHIR_FHIR_VERSION: "R4"
      HAPI_FHIR_BULK_EXPORT_ENABLED: true
      HAPI_FHIR_BULK_IMPORT_ENABLED: true
      HAPI_FHIR_BATCH_JOB_ENABLED: true
      HAPI_FHIR_BINARY_STORAGE_ENABLED: true
      HAPI_FHIR_REUSE_CACHED_SEARCH_RESULTS_MILLIS: 5000
      HAPI_FHIR_RETAIN_CACHED_SEARCHES_MINS: 5
      HAPI_FHIR_BULK_EXPORT_MAXIMUM_BINARY_SIZE: 104857600  # 100 MB
      HAPI_FHIR_BULK_EXPORT_RETENTION_PERIOD: 86400000  # 24 heures
      HAPI_FHIR_BULK_EXPORT_MAXIMUM_RESOURCE_PER_FILE: 1000
    ports:
      - "${HAPI_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/fhir/metadata"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Dépendance PostgreSQL
    depends_on:
      postgres:
        condition: service_healthy
    
    # Réseau
    networks:
      - health_data_platform_network
    
    # Labels
    labels:
      - "description=API FHIR"
      - "environment=development"
      - "version=latest"
    
    # Profil pour activation optionnelle
    profiles:
      - full

  minio:
    image: minio/minio:latest
    container_name: health_data_platform_minio_s3
    hostname: data-platform-minio-s3

    # Configuration des variables d'environnement depuis .env
    env_file:
      - .env

    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-minioadmin123}

    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "9000:9000"
      - "${MINIO_CSL_PORT:-9001}:9001"
    
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

    # Réseau
    networks:
      - health_data_platform_network
    
    # Labels
    labels:
      - "description=MINIO S3"
      - "environment=development"
      - "version=latest"
    
    # Profil pour activation optionnelle
    profiles:
      - full


# Configuration par défaut
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Ajout de la configuration de logging à tous les services
x-default-opts: &default-opts
  logging: *default-logging