/// url = 'https://aphp.fr/ig/fhir/dm/StructureMap/EHR2FSL'
/// name = 'EHR2FSL'
/// title = 'EHR to FHIR Semantic Layer Transform'
/// status = 'draft'
/// description = 'Transforms EHR logical model data to FHIR Semantic Layer resources using Bundle as container'

uses "https://aphp.fr/ig/fhir/dm/StructureDefinition/ehr" alias EHR as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target

group EHR2FSL(source src : EHR, target bundle : Bundle) {
  // Initialize Bundle
  src -> bundle.id = uuid() "bundle-id";
  src -> bundle.type = 'collection' "bundle-type";
  src -> (%bundle.timestamp = now()) "bundle-timestamp";
  
  // Transform Patient
  src.patient as patient -> bundle.entry as patientEntry then {
    patient -> patientEntry.resource = create('Patient') as dmPatient then {
      patient then TransformPatient(patient, dmPatient) "transform-patient";
      patient then setEntryRequestAndFullUrl(dmPatient, patientEntry) "setRequestAndFullUrl";
      src.patientAddress as patientAddress where patientAddress.patientId = %patient.patientId then setAddress(patientAddress, dmPatient) "transform-patientAddress";
    } "create-patient";
//    patient.patientId as pid -> patientEntry.fullUrl = append('urn:ehr:Patient/', pid) "patient-url"; // c'est trivial parce qu'on récupère l'id source pour l'id fhir, mais ce n'est pas une bonne pratique (risque de collision des id si plusieurs sources)
  } "patient-entry";

  // Transform PMSI Encounters
//  src.patient as srcPatient then {
//    srcPatient.patientId as patientId then {  utiliser donneesPmsi.patientId, ça évite de faire un lien sur le présupposé que le set de données traité ne concerne qu'un patient. 
    src.donneesPmsi as pmsi -> bundle.entry as encounterEntry then {
      pmsi -> encounterEntry.resource = create('Encounter') as encounter then {
        pmsi then TransformEncounter(pmsi, encounter) "create-encounter";
        pmsi then setEntryRequestAndFullUrl(encounter, encounterEntry) "setRequestAndFullUrl";
      } "create-encounter" ;
//      pmsi.pmsiId as eid -> encounterEntry.fullUrl = append('urn:ehr:Encounter/', eid) "encounter-url";
    } "encounter-entries";
//    } "nav-patientId";
//  } "nav-patient";

// ---------------------------------------------------------
// Je n'ai relu que jusqu'ici (y compris les groups appelés)
// ---------------------------------------------------------

  // Transform Conditions (Diagnostic)
  //src.patient as srcPatient then {
    //srcPatient.patientId as patientId then {
      src.diagnostic as diag -> bundle.entry as conditionEntry then {
        diag -> conditionEntry.resource = create('Condition') as condition then
          TransformCondition(diag, condition) "create-condition";
        diag.diagnosticId as did -> conditionEntry.fullUrl = append('urn:ehr:Condition/', did) "condition-url";
      } "condition-entries";
    //} "nav-patientId";
  //} "nav-patient";

  // Transform Procedures (Acts)
  src.patient as srcPatient then {
    srcPatient.patientId as patientId then {
      src.acte as acte -> bundle.entry as procedureEntry then {
      acte -> procedureEntry.resource = create('Procedure') as procedure then
        TransformProcedure(acte, procedure) "create-procedure";
      acte.acteId as aid -> procedureEntry.fullUrl = append('urn:ehr:Procedure/', aid) "procedure-url";
  } "procedure-entries";
    } "nav-patientId";
  } "nav-patient";
  
  // Transform Laboratory Observations
  //src.patient as srcPatient then {
    //srcPatient.patientId as patientId then {
      src.biologie as lab -> bundle.entry as labEntry then {
        lab -> labEntry.resource = create('Observation') as labObs then
          TransformLabObservation(lab, labObs) "create-lab-obs";
        lab.biologieId as lid -> labEntry.fullUrl = append('urn:ehr:Observation/', lid) "lab-url";
      } "lab-entries";
    //} "nav-patientId";
  //} "nav-patient";
  
  // Transform Medication Requests
  //src.patient as srcPatient then {
    //srcPatient.patientId as patientId then {
      src.prescription as srcPres -> bundle.entry as medEntry then {
        src -> medEntry.resource = create('MedicationRequest') as medReq then
          TransformMedicationRequest(srcPres, medReq) "create-med-request";
        srcPres.prescriptionId as srcPrescriptionId -> medEntry.fullUrl = append('urn:ehr:MedicationRequest/', srcPrescriptionId) "med-url";
      } "medication-entries";
    //} "nav-patientId";
  //} "nav-patient";

  // Transform Care Observations (Vital Signs)
  //src.patient as srcPatient then {
    //srcPatient.patientId as patientId then {
      src.dossierSoin as soins -> bundle.entry as vitalEntry then {
        soins -> vitalEntry.resource = create('Observation') as vitalObs then
          TransformVitalSigns(soins, vitalObs) "create-vital-obs";
        soins.soinId as sid -> vitalEntry.fullUrl = append('urn:ehr:Observation/vital-', sid) "vital-url";
      } "vital-entries";
    //} "nav-patientId";
  //} "nav-patient";

  // Transform Lifestyle Observations
  //src.patient as srcPatient then {
    //srcPatient.patientId as patientId then {
      src.styleVie as lifestyle -> bundle.entry as lifestyleEntry then {
        lifestyle -> lifestyleEntry.resource = create('Observation') as lifestyleObs then
          TransformLifestyle(lifestyle, lifestyleObs) "create-lifestyle-obs";
        lifestyle.styleVieId as lsid -> lifestyleEntry.fullUrl = append('urn:ehr:Observation/lifestyle-', lsid) "lifestyle-url";
      } "lifestyle-entries";
    //} "nav-patientId";
  //} "nav-patient";

}

// ========================================================================
// PATIENT TRANSFORMATION
// ========================================================================

group TransformPatient(source src, target tgt : Patient) {
  src -> tgt.id = uuid() "setId";
  //  src.patientId as id -> tgt.id = id "patient-id"; 
  
  // Identifiers
  src.patientId as pid -> tgt.identifier as identifier then {
    pid -> identifier.use = 'usual' "id-use";
    pid -> identifier.type = cc('http://terminology.hl7.org/CodeSystem/v2-0203', 'PI', 'Patient Identifier') "id-type";
    pid -> identifier.system = 'https://hospital.eu/ehr/patient-id' "id-system";
    pid -> identifier.value = pid "id-value";
  } "patient-identifier";

  // NIR identifier <- C'est pas terrible côté expression de besoin : qu'est ce qu'ils veulent quand ils disent NIR ? ça peut être le NSS, mais du coup c'est pas un identifier (un NSS peut correspondre à plusieurs ayant droits), et ce serait plutôt une info qui irait côté claim. ça peut aussi être l'ins-nir, mais du coup qu'est ce qu'ils attendent dans l'ins ? Bref, à mon avis, faut discuter cette variable au niveau du GT. 
/*
  src.nir as nir where nir.exists() -> tgt.identifier as insIdentifier then {
    nir -> insIdentifier.use = 'official' "ins-use";
    nir -> insIdentifier.type = cc('http://hl7.fr/fhir/CodeSystem/fr-v2-0203', 'INS-NIR') "ins-type";
    nir -> insIdentifier.system = 'urn:oid:1.2.250.1.213.1.4.8' "ins-system";
    nir -> insIdentifier.value = nir "ins-value";
  } "ins-identifier"; 
*/

  // Alternative INS from ins field
  src.ins as ins where ins.exists() -> tgt.identifier as insIdentifier then {
    ins -> insIdentifier.use = 'official' "ins-use"; // On part du principe qu'on n'est pas sur un old.
    ins -> insIdentifier.type = cc('https://hl7.fr/ig/fhir/core/CodeSystem/fr-core-cs-v2-0203', 'INS-NIR', 'NIR définitif') "ins-type";
    ins -> insIdentifier.system = 'urn:oid:1.2.250.1.213.1.4.8' "ins-system";
    ins -> insIdentifier.value = ins "ins-value";
  } "ins-identifier";

  // Name
  src where src.nom.exists() or src.prenom.exists() -> tgt.name as name then {
    src.nom as lastName -> name.family = lastName "family-name";
    src.prenom as firstName -> name.given = firstName "given-name";
    src -> name.use = 'official' "name-use"; // hypothèse un peu forte.
  } "patient-name";

  // Demographics On aurait pu faire plus élégant avec un ConceptMap
  src.dateNaissance as birthDate -> tgt.birthDate = birthDate "birth-date";
  src.sexe as gender where gender = 'h' -> tgt.gender = 'male' "gender-male"; 
  src.sexe as gender where gender = 'f' -> tgt.gender = 'female' "gender-female";
  src.sexe as gender where gender.exists() and gender != 'h' and gender != 'f' -> tgt.gender = 'unknown' "gender-unknown"; // n'a pas grand sens en l'état des contraintes SQL

  // Death information
  src.dateDeces as deathDate where deathDate.exists() -> tgt.deceased = deathDate "death-date";

  // Multiple birth
  src.rangGemellaire as twin where twin.exists() -> tgt.multipleBirth = twin "multiple-birth";

/*
  // Address (simplified - geographic data)
  src where src.latitude.exists() or src.longitude.exists() or src.codeGeographiqueResidence.exists() -> 
    tgt.address as address then {
    src.codeGeographiqueResidence as postalCode -> address.postalCode = postalCode "postal-code";
    src.libelleGeographiqueResidence as city -> address.city = city "city";
    // Extensions for geographic coordinates could be added here
  } "patient-address";
*/
}

// ========================================================================
// PATIENT_LOCATION TRANSFORMATION
// ========================================================================

group setAddress(source src, target tgt : Patient) {
  src where src.latitude.exists() or src.longitude.exists() or src.codeIris.exists() or src.libelleIris.exists()then {
    src -> tgt.address as newAddress then {
      src where src.latitude.exists() or src.longitude.exists() -> newAddress.extension as geolocationExtension, 
        geolocationExtension.url = "http://hl7.org/fhir/StructureDefinition/geolocation" then {
          src.latitude as srcLat -> geolocationExtension.extension as tgtLat,
            tgtLat.url = "latitude", 
            tgtLat.value = srcLat "setLat";
          src.longitude as srcLong -> geolocationExtension.extension as tgtLong,
            tgtLong.url = "longitude", 
            tgtLong.value = srcLong "setLong";
        } "setCoordinates" ;
      src where src.codeIris.exists() or src.libelleIris.exists() -> newAddress.extension as irisExtension, 
        irisExtension.url = "http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-censusTract", 
        irisExtension.value = (iif(%src.codeIris.exists() and %src.libelleIris.exists(), %src.codeIris & ' - ' & %src.libelleIris, %src.codeIris & %src.libelleIris)) "setIris";
      src.dateRecueil as dateRecueil -> newAddress.period as newAddressPeriod, newAddressPeriod.start = dateRecueil "setDateRecueil";
    } "createAddress" ;
  } "checkSource";
}

// ========================================================================
// ENCOUNTER TRANSFORMATION  
// ========================================================================

group TransformEncounter(source src, target tgt : Encounter) {
  src -> tgt.id = uuid() "setId";
//  src.pmsiId as id -> tgt.id = id "encounter-id";

  // Identifier
  src -> tgt.identifier as identifier then {
    src -> identifier.use = 'official' "encounter-id-use";
    src -> identifier.type = cc('https://hl7.fr/ig/fhir/core/CodeSystem/fr-core-cs-identifier-type', 'VN', 'Visit Number') "id-type";
    src -> identifier.system = 'https://hospital.eu/ehr/pmsi-id' "encounter-id-system";
    src.pmsiId as srcEncoutnerId -> identifier.value = srcEncoutnerId "encounter-id-value";
  } "encounter-identifier";

  // Status - default to finished for historical data
  src -> tgt.status = 'finished' "encounter-status";

  // Class - assume inpatient for PMSI data
  src -> tgt.class = c('http://terminology.hl7.org/CodeSystem/v3-ActCode', 'IMP', 'inpatient encounter') "encounter-class";

  // Reference patient
  src -> tgt.subject = create('Reference') as ref then {
    src.patientId as patientId -> ref.type = 'Patient', 
      ref.identifier = create('Identifier') as subjectIdentifier then {
        patientId -> subjectIdentifier.system = 'https://hospital.eu/ehr/patient-id', 
          subjectIdentifier.value = patientId "setPatientRef";
      } "createRef";
  } "encounter-subject";  

  // Period
  src where src.dateDebutSejour.exists() or src.dateFinSejour.exists() -> tgt.period as period then {
    src.dateDebutSejour as startDate -> period.start = startDate "period-start";
    src.dateFinSejour as endDate -> period.end = endDate "period-end";
  } "encounter-period";

  // Duration
  src.dureeSejour as duration -> tgt.length as length then {
    duration -> length.value = duration "length-value";
    duration -> length.unit = 'd' "length-unit";
    duration -> length.system = 'http://unitsofmeasure.org' "length-system";
    duration -> length.code = 'd' "length-code";
  } "encounter-length";

  // Hospitalization
  src where src.modeEntree.exists() or src.modeSortie.exists() -> tgt.hospitalization as hosp then {
    src.modeEntree as admitSource -> hosp.admitSource as admitSrc then {
      admitSource -> admitSrc.text = admitSource "admit-source-text";
    } "admit-source";
    src.modeSortie as dischargeDisp -> hosp.dischargeDisposition as dischargeDsp then {
      dischargeDisp -> dischargeDsp.text = dischargeDisp "discharge-disp-text";
    } "discharge-disposition";
  } "encounter-hospitalization";

  // Service Provider
  src where src.uniteFonctionnelle.exists() or src.service.exists() or src.etablissement.exists() -> tgt.serviceProvider as provider then {
    src -> provider.display = (iif(%src.uniteFonctionnelle.exists(), %src.uniteFonctionnelle, iif(%src.service.exists(), %src.service, %src.etablissement))) "provider-display";
  } "provider";
/*
  // Location - On n'a pas de location à gérer à ce stade (établissement, service et UF, halluciné par l'IA, sont des Organization que j'ai du coup mi dans Provider. )
  src.service as service -> tgt.location as location then {
    service -> location.location as loc then {
      service -> loc.display = service "location-display";
    } "location-ref";
  } "encounter-location";
*/
}

// ========================================================================
// CONDITION TRANSFORMATION
// ========================================================================

group TransformCondition(source src, target tgt : Condition) {
  src.diagnosticId as id -> tgt.id = id "condition-id";

  // Identifier
  src.diagnosticId as diagId -> tgt.identifier as identifier then {
    diagId -> identifier.use = 'official' "condition-id-use";
    diagId -> identifier.system = 'https://hospital.eu/ehr/diagnostic-id' "condition-id-system";  
    diagId -> identifier.value = diagId "condition-id-value";
  } "condition-identifier";

  // Category
  src.typeDiagnostic as diagType -> tgt.category as category then {
    diagType -> category.text = diagType "category-text";
  } "condition-category";

  // Code (ICD-10)
  src.codeDiagnostic as code -> tgt.code as conditionCode then {
    code -> conditionCode.coding as coding then {
      code -> coding.system = 'http://hl7.org/fhir/sid/icd-10' "code-system";
      code -> coding.code = code "code-value";
      src.libelleDiagnostic as label -> coding.display = label "code-display";
    } "condition-coding";
    src.libelleDiagnostic as text -> conditionCode.text = text "code-text";
  } "condition-code";

  // Subject
  src -> tgt.subject = create('Reference') as ref then {
    src.patientId as srcPatientId -> ref.reference = ('Patient/' + %srcPatientId) "patient-ref";
  } "condition-subject";

  // Encounter reference
  src -> tgt.encounter = create('Reference') as ref then {
    src.pmsiId as srcEncounterId -> ref.reference = ('Encounter/' + %srcEncounterId) "encounter-ref";
  } "condition-encounter";

  // Recorded date
  src.dateRecueil as diagDate -> tgt.recordedDate = diagDate "condition-recorded-date";

  // Clinical status - assume active for recorded diagnoses
  src -> tgt.clinicalStatus = cc('http://terminology.hl7.org/CodeSystem/condition-clinical', 'active') "condition-clinical-status";

  // Verification status - assume confirmed for coded diagnoses  
  src -> tgt.verificationStatus = cc('http://terminology.hl7.org/CodeSystem/condition-ver-status', 'confirmed') "condition-verification-status";
}

// ========================================================================
// PROCEDURE TRANSFORMATION
// ========================================================================

group TransformProcedure(source src, target tgt : Procedure) {
  src.acteId as id -> tgt.id = id "procedure-id";

  // Identifier
  src.acteId as acteId -> tgt.identifier as identifier then {
    acteId -> identifier.use = 'official' "procedure-id-use";
    acteId -> identifier.system = 'https://hospital.eu/ehr/acte-id' "procedure-id-system";
    acteId -> identifier.value = acteId "procedure-id-value";
  } "procedure-identifier";

  // Status - assume completed for historical data
  src -> tgt.status = 'completed' "procedure-status";

  // Code (CCAM)
  src.codeActe as code -> tgt.code as procedureCode then {
    code -> procedureCode.coding as coding then {
      code -> coding.system = 'https://mos.esante.gouv.fr/NOS/TRE_A00-ProducteurDocNonPS/FHIR/TRE-A00-ProducteurDocNonPS' "code-system";
      code -> coding.code = code "code-value";
      src.libelleActe as label -> coding.display = label "code-display";
    } "procedure-coding";
    src.libelleActe as text -> procedureCode.text = text "code-text";
  } "procedure-code";

  // Subject
  src -> tgt.subject = create('Reference') as ref then {
    src.patientId as srcPatientId -> ref.reference = ('Patient/' + %srcPatientId) "patient-ref";
  } "condition-subject";

  // Encounter reference
  src -> tgt.encounter = create('Reference') as ref then {
    src.pmsiId as srcEncounterId -> ref.reference = ('Encounter/' + %srcEncounterId) "encounter-ref";
  } "condition-encounter";

  // Performed date/time
  src.dateActe as performedDate where %performedDate.exists() -> tgt.performed = performedDate "procedure-performed";

  // Performer
  src.executant as performer -> tgt.performer as perf then {
    performer -> perf.actor as actor then {
      performer -> actor.display = performer "performer-display";
    } "performer-actor";
  } "procedure-performer";
}

// ========================================================================
// LABORATORY OBSERVATION TRANSFORMATION
// ========================================================================

group TransformLabObservation(source src, target tgt : Observation) {
  src.biologieId as id -> tgt.id = id "lab-obs-id";

  // Identifier
  src.biologieId as bioId -> tgt.identifier as identifier then {
    bioId -> identifier.use = 'official' "lab-id-use";
    bioId -> identifier.system = 'https://hospital.eu/ehr/biologie-id' "lab-id-system";
    bioId -> identifier.value = bioId "lab-id-value";
  } "lab-identifier";

  // Status - map validation status or default to final
  src.statutValidation as validation where validation = 'VALIDE' -> tgt.status = 'final' "status-validated";
  src where src.statutValidation.exists().not() -> tgt.status = 'final' "status-default";

  // Category
  src -> tgt.category as category then {
    src -> category.coding as coding then {
      src -> coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category' "category-system";
      src -> coding.code = 'laboratory' "category-code";
      src -> coding.display = 'Laboratory' "category-display";
    } "category-coding";
  } "lab-category";

  // Code (LOINC)
  src.codeLoinc as loinc -> tgt.code as code then {
    loinc -> code.coding as coding then {
      loinc -> coding.system = 'http://loinc.org' "code-system";
      loinc -> coding.code = loinc "code-value";
      src.libelleTest as label -> coding.display = label "code-display";
    } "lab-coding";
    src.libelleTest as text -> code.text = text "code-text";
  } "lab-code";

  // Subject
  src -> tgt.subject = create('Reference') as ref then {
    src.patientId as srcPatientId -> ref.reference = ('Patient/' + %srcPatientId) "patient-ref";
  } "lab-subject";

  // Encounter reference
  /*
  src.pmsiId as encounterId -> tgt.encounter = create('Reference') as ref then {
    encounterId -> ref.reference = ('Encounter/' + %encounterId) "encounter-ref";
  } "lab-encounter";
  */

  // Effective date/time
  src.datePrelevement as collectionDate where %collectionDate.exists() -> tgt.effective = cast(collectionDate, 'dateTime') "lab-effective";

  // Value (numeric or text)
  src.valeur as numValue where numValue.exists() -> tgt.value = create('Quantity') as qty then {
    numValue -> qty.value = numValue "quantity-value";
    src.unite as unit -> qty.unit = unit "quantity-unit";
    src.unite as unit -> qty.code = unit "quantity-code";
    src -> qty.system = 'http://unitsofmeasure.org' "quantity-system";
  } "lab-value-quantity";

  src.valeurTexte as textValue where textValue.exists() and src.valeur.exists().not() -> 
    tgt.value = textValue "lab-value-string";

  // Reference range
  src where src.borneInfNormale.exists() or src.borneSupNormale.exists() -> 
    tgt.referenceRange as range then {
    src.borneInfNormale as low -> range.low as lowQty then {
      low -> lowQty.value = low "ref-low-value";
      src.unite as unit -> lowQty.unit = unit "ref-low-unit";
      src.unite as unit -> lowQty.code = unit "ref-low-code";
      src -> lowQty.system = 'http://unitsofmeasure.org' "ref-low-system";
    } "reference-low";
    src.borneSupNormale as high -> range.high as highQty then {
      high -> highQty.value = high "ref-high-value";
      src.unite as unit -> highQty.unit = unit "ref-high-unit";
      src.unite as unit -> highQty.code = unit "ref-high-code";
      src -> highQty.system = 'http://unitsofmeasure.org' "ref-high-system";
    } "reference-high";
  } "lab-reference-range";

  // Performer
  src.laboratoire as lab -> tgt.performer as performer then {
    lab -> performer.display = lab "performer-display";
  } "lab-performer";

  // Note/Comment
  /*
  src.commentaire as comment -> tgt.note as note then {
    comment -> note.text = comment "note-text";
  } "lab-note";
  */
}

// ========================================================================
// MEDICATION REQUEST TRANSFORMATION
// ========================================================================

group TransformMedicationRequest(source src, target tgt : MedicationRequest) {
  src.prescriptionId as id -> tgt.id = id "med-request-id";

  // Identifier
  src.prescriptionId as presId -> tgt.identifier as identifier then {
    presId -> identifier.use = 'usual' "med-request-id-use";
    presId -> identifier.system = 'https://hospital.eu/ehr/exposition-id' "med-request-id-system";
    presId -> identifier.value = presId "med-request-id-value";
  } "med-request-identifier";

  // Status - assume active for current prescriptions
  src -> tgt.status = 'active' "med-request-status";

  // Intent
  src -> tgt.intent = 'order' "med-request-intent";

  // Subject
  src -> tgt.subject = create('Reference') as ref then {
    src.patientId as srcPatientId -> ref.reference = ('Patient/' + %srcPatientId) "patient-ref";
  } "med-request-subject";

  // Encounter reference
  /*
  src.pmsiId as encounterId -> tgt.encounter = create('Reference') as ref then {
    encounterId -> ref.reference = ('Encounter/' + %encounterId) "encounter-ref";
  } "med-request-encounter";
  */

  // Medication (create inline for ATC code)
  src.codeAtc as atc -> tgt.medication = create('CodeableConcept') as medication then {
    atc -> medication.coding as coding then {
      atc -> coding.system = 'http://www.whocc.no/atc' "atc-system";
      atc -> coding.code = atc "atc-code";
      src.denomination as denom -> coding.display = denom "atc-display";
    } "medication-coding";
    src.denomination as text -> medication.text = text "medication-text";
  } "medication-atc";

  // Authored date
  src.datePrescription as prescDate -> tgt.authoredOn = prescDate "med-authored";

  // Requester
  src.prescripteur as prescriber -> tgt.requester as requesterRef then {
    prescriber -> requesterRef.display = prescriber "requester-display";
  } "med-requester";

  // Dosage instruction
  src -> tgt.dosageInstruction as dosage then {
    // Route of administration
    src.voieAdministration as route -> dosage.route as routeCC then {
      route -> routeCC.text = route "route-text";
    } "dosage-route";

    // Timing (based on prescription period)
    src where src.dateDebutPrescription.exists() or src.dateFinPrescription.exists() -> dosage.timing as timing then {
      src where src.dateDebutPrescription.exists() or src.dateFinPrescription.exists() -> timing.repeat as repeat then {
        src.dateDebutPrescription as start -> repeat.bounds = create('Period') as period then {
          start -> period.start = start "timing-start";
          src.dateFinPrescription as end -> period.end = end "timing-end";
        } "timing-bounds";
      } "timing-repeat";
    } "dosage-timing";

    // Pharmaceutical form as additional instruction
    /*
    src.formePharmaceutique as form -> dosage.additionalInstruction as instruction then {
      form -> instruction.text = form "form-text";
    } "dosage-form";
    */
  } "medication-dosage";
}

// ========================================================================
// VITAL SIGNS TRANSFORMATION
// ========================================================================

group TransformVitalSigns(source src, target tgt : Observation) {
  src.soinId as id -> tgt.id = append('vital-', id) "vital-id";

  // Multiple observations for different vital signs
  // Weight observation
  /*src.poids as weight where weight.exists() -> tgt then {
    src -> tgt.status = 'final' "weight-status";
    src -> tgt.category as category then {
      src -> category.coding as coding then {
        src -> coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category' "weight-category-system";
        src -> coding.code = 'vital-signs' "weight-category-code";
      } "weight-category-coding";
    } "weight-category";
    
    src -> tgt.code as code then {
      src -> code.coding as coding then {
        src -> coding.system = 'http://loinc.org' "weight-code-system";
        src -> coding.code = '29463-7' "weight-code-value";
        src -> coding.display = 'Body Weight' "weight-code-display";
      } "weight-coding";
    } "weight-code";
    
    // Subject
    patientId -> tgt.subject = create('Reference') as ref then {
      patientId -> ref.reference = ('Patient/' + %patientId) "patient-ref";
    } "weight-subject";

    // Encounter reference
    src.pmsiId as encounterId -> tgt.encounter = create('Reference') as ref then {
      encounterId -> ref.reference = ('Encounter/' + %encounterId) "encounter-ref";
    } "weight-encounter";

    src.dateMesurePoids as weightDate where %weightDate.exists() -> tgt.effective = cast(weightDate, 'dateTime') "weight-effective";
    
    weight -> tgt.valueQuantity as qty then {
      weight -> qty.value = weight "weight-value";
      weight -> qty.unit = 'kg' "weight-unit";
      weight -> qty.system = 'http://unitsofmeasure.org' "weight-system";
      weight -> qty.code = 'kg' "weight-code-ucum";
    } "weight-quantity";
  } "transform-weight";
*/
  // Height observation - would need separate entry
  // Blood pressure observation - would need separate entry with components
  // This example shows weight; similar patterns would apply for other vitals
}

// ========================================================================
// LIFESTYLE TRANSFORMATION
// ========================================================================

group TransformLifestyle(source src, target tgt : Observation) {
  src.styleVieId as id -> tgt.id = append('lifestyle-', id) "lifestyle-id";

  // Smoking status observation
  src.consommationTabac as tobacco where tobacco.exists() -> tgt then {
    src -> tgt.status = 'final' "smoking-status";
    src -> tgt.category as category then {
      src -> category.coding as coding then {
        src -> coding.system = 'http://terminology.hl7.org/CodeSystem/observation-category' "smoking-category-system";
        src -> coding.code = 'social-history' "smoking-category-code";
      } "smoking-category-coding";
    } "smoking-category";

    src -> tgt.code as code then {
      src -> code.coding as coding then {
        src -> coding.system = 'http://loinc.org' "smoking-code-system";
        src -> coding.code = '72166-2' "smoking-code-value";
        src -> coding.display = 'Tobacco smoking status' "smoking-code-display";
      } "smoking-coding";
    } "smoking-code";

    // Subject
    src -> tgt.subject = create('Reference') as ref then {
      src.patientId as srcPatientId -> ref.reference = ('Patient/' + %srcPatientId) "patient-ref";
    } "smoking-subject";

    // Encounter reference
    /*
    src.pmsiId as encounterId -> tgt.encounter = create('Reference') as ref then {
      encounterId -> ref.reference = ('Encounter/' + %encounterId) "encounter-ref";
    } "smoking-encounter";
    */

    src.dateRecueil as collectDate where %collectDate.exists() -> tgt.effective = cast(collectDate, 'dateTime') "smoking-effective";
    
    tobacco -> tgt.value = create('CodeableConcept') as valueCC then {
      tobacco -> valueCC.text = tobacco "smoking-value-text";
    } "smoking-value";
  } "transform-smoking";

  // Similar patterns would apply for alcohol, drugs, and physical activity
}

group setEntryRequestAndFullUrl(source newRes, target tgtEntry) { 
  newRes.id as newResId then {
    newResId -> tgtEntry.fullUrl = ('urn:ehr:' + %newRes.type().name + '/' + %newResId) "setFullUrl";
    //newResId -> tgtEntry.request as tgtEntryRequest, 
    //  tgtEntryRequest.method = 'POST',
    //  tgtEntryRequest.url = (%newRes.type().name + '/' + %newResId) "setRequest" ;
  } "setResourceType";
}