-- ========================================================================
-- Script de cr√©ation des tables EHR - Version Docker avec support fran√ßais
-- Adapt√© de: data-plateform/raw-layer/sql/ehr-ddl.sql
-- ========================================================================
-- Ce script cr√©e le sch√©ma optimis√© pour stocker les r√©ponses aux questionnaires FHIR
-- li√©es aux variables de donn√©es de sant√© essentielles pour l'EDSH.
-- 
-- Optimisations cl√©s pour PostgreSQL 16.x avec support fran√ßais:
-- - Encodage UTF-8 et collation fran√ßaise pour caract√®res accentu√©s
-- - R√©sultats de laboratoire consolid√©s avec codes LOINC
-- - Tables cliniques li√©es √† la table centrale des rencontres PMSI  
-- - Index hash pour recherches exactes et performance optimis√©e
-- - Index couvrants avec colonnes INCLUDE pour optimisation des requ√™tes
-- - Recherche textuelle en fran√ßais pour noms de patients
-- - Index spatiaux GIST pour coordonn√©es g√©ographiques
-- - Validation des donn√©es avec contraintes de v√©rification √©tendues
-- - Nommage optimis√© des cl√©s √©trang√®res et int√©grit√© r√©f√©rentielle
-- ========================================================================

\echo 'üèóÔ∏è Cr√©ation du sch√©ma de tables EHR avec support fran√ßais...'

-- Connexion √† la base de donn√©es EHR
\c ehr

-- Configuration pour le fran√ßais (utilisation locale C.UTF-8 compatible Docker)
SET lc_messages TO 'C.UTF-8';
SET lc_monetary TO 'C.UTF-8'; 
SET lc_numeric TO 'C.UTF-8';
SET lc_time TO 'C.UTF-8';
SET default_text_search_config TO 'french';

-- Suppression des tables dans l'ordre inverse des d√©pendances (si elles existent)
\echo 'üßπ Nettoyage des tables existantes...'

DROP TABLE IF EXISTS style_vie CASCADE;
DROP TABLE IF EXISTS posologie CASCADE;
DROP TABLE IF EXISTS administration CASCADE;
DROP TABLE IF EXISTS dossier_soins CASCADE;
DROP TABLE IF EXISTS prescription CASCADE;
DROP TABLE IF EXISTS biologie CASCADE;
DROP TABLE IF EXISTS actes CASCADE;
DROP TABLE IF EXISTS diagnostics CASCADE;
DROP TABLE IF EXISTS donnees_pmsi CASCADE;
DROP TABLE IF EXISTS patient_adresse CASCADE;
DROP TABLE IF EXISTS patient CASCADE;

\echo 'üìã Cr√©ation des tables principales...'

-- ========================================================================
-- TABLES PRINCIPALES
-- ========================================================================

-- Table: patient
-- Informations patient consolid√©es combinant donn√©es d'identit√© et g√©ocodage
-- Bas√© sur linkId: 2958000860428 (Identit√© patient) et 5491974639955 (G√©ocodage) 
-- Inclut sexe depuis linkId: 3894630481120 (consolid√© depuis donn√©es PMSI)
CREATE TABLE IF NOT EXISTS patient (
    patient_id BIGSERIAL PRIMARY KEY,
    
    -- Champs d'identit√© (linkId: 2958000860428)
    nom VARCHAR(255),
    prenom VARCHAR(255), 
    nir VARCHAR(15),
    ins VARCHAR(50),
    date_naissance DATE, -- Peut √™tre NULL
    sexe VARCHAR(20),  -- √âtait dans PMSI, mieux plac√© ici
    date_deces DATE,
    source_deces VARCHAR(50),
    rang_gemellaire INTEGER,
    
    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE patient IS 'Informations d√©mographiques et d''identit√© patient consolid√©es combinant les √©l√©ments du questionnaire FHIR pour identit√© patient et g√©ocodage (linkId: 2958000860428, 3816475533472)';

-- Table: patient_adresse
-- Adresses patients avec g√©ocodage s√©par√© pour g√©rer cardinalit√© et date de recueil
CREATE TABLE IF NOT EXISTS patient_adresse (
    patient_adresse_id BIGSERIAL PRIMARY KEY,
    patient_id BIGINT NOT NULL,

    latitude DECIMAL(10,7),
    longitude DECIMAL(10,7), 
    code_iris VARCHAR(20),
    libelle_iris VARCHAR(200),
    code_geographique_residence VARCHAR(10),
    libelle_geographique_residence VARCHAR(200),
    date_recueil DATE,

    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE patient_adresse IS 'Adresses patients avec donn√©es de g√©ocodage et r√©sidence g√©ographique, s√©par√©es pour g√©rer la cardinalit√© et les dates de recueil';

-- Table: donnees_pmsi
-- Donn√©es principales de rencontre/s√©jour - table centrale de liaison pour toutes les donn√©es cliniques
-- Bas√© sur linkId: 2825244231605 (Donn√©es PMSI) - repeats=true
-- Note: colonne age supprim√©e selon exigences d'optimisation
CREATE TABLE IF NOT EXISTS donnees_pmsi (
    pmsi_id BIGSERIAL PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    
    -- Champs PMSI principaux (age supprim√© - calcul√© depuis patient.date_naissance)
    mode_sortie VARCHAR(100),
    age_admission INTEGER, -- N√©cessaire si pas de date de naissance
    
    -- Dates de s√©jour et donn√©es administratives
    date_debut_sejour DATE,
    date_fin_sejour DATE,
    mode_entree VARCHAR(100),
    
    -- Informations √©tablissement de soins
    etablissement VARCHAR(255),
    service VARCHAR(255),
    unite_fonctionnelle VARCHAR(255),
    
    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE donnees_pmsi IS 'Donn√©es principales de rencontre healthcare depuis PMSI (Programme de m√©dicalisation des syst√®mes d''information) - table centrale de liaison pour toutes les donn√©es cliniques (linkId: 2825244231605)';

-- Table: diagnostics  
-- Codes diagnostiques et informations li√©s aux rencontres healthcare
CREATE TABLE IF NOT EXISTS diagnostics (
    diagnostic_id BIGSERIAL PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    pmsi_id BIGINT NOT NULL,
    
    -- Informations diagnostiques (linkId: 9391816419630)
    code_diagnostic VARCHAR(20) NOT NULL,
    type_diagnostic VARCHAR(50),
    libelle_diagnostic TEXT,
    
    -- Contexte de collecte de donn√©es
    date_recueil DATE,
    
    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE diagnostics IS 'Codes diagnostiques et informations li√©s aux rencontres healthcare utilisant classifications ICD-10/CIM-10 (linkId: 9391816419630)';

-- Table: actes
-- Proc√©dures m√©dicales et actes li√©s aux rencontres PMSI
CREATE TABLE IF NOT EXISTS actes (
    acte_id BIGSERIAL PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    pmsi_id BIGINT NOT NULL,
    
    -- Informations acte/proc√©dure (linkId: 591926901726)
    code_acte VARCHAR(20) NOT NULL,
    libelle_acte TEXT,
    date_acte TIMESTAMP,
    executant VARCHAR(255), -- Pas dans le socle
    
    -- Contexte de collecte de donn√©es
    date_recueil DATE,
    
    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE actes IS 'Proc√©dures m√©dicales et actes r√©alis√©s durant rencontres healthcare utilisant CCAM et autres classifications standard (linkId: 591926901726)';

-- Table: biologie
-- Table consolid√©e des r√©sultats de laboratoire pour tous examens biologiques
-- Table g√©n√©rique optimis√©e utilisant codes LOINC pour diff√©rencier types de tests
-- Combine: Fonction r√©nale, Bilan h√©patique, H√©mogramme, Biologie autres
CREATE TABLE IF NOT EXISTS biologie (
    biologie_id BIGSERIAL PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    
    -- Identification test - table biologie consolid√©e
    code_loinc VARCHAR(20),
    libelle_test VARCHAR(255),
    type_examen VARCHAR(100),
    
    -- R√©sultats tests
    valeur DECIMAL(15,6),
    unite VARCHAR(50),
    valeur_texte TEXT,
    
    -- Contexte et timing test
    date_prelevement TIMESTAMP WITH TIME ZONE,
    statut_validation VARCHAR(50),
    
    -- Plages de r√©f√©rence
    borne_inf_normale DECIMAL(15,6),
    borne_sup_normale DECIMAL(15,6),
    
    -- Informations qualit√©
    laboratoire VARCHAR(255), -- Pas dans le socle
    
    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE biologie IS 'R√©sultats de tests de laboratoire consolid√©s pour tous examens biologiques, diff√©renci√©s par codes LOINC et types de tests incluant fonction r√©nale, bilan h√©patique, h√©mogramme complet, et autres tests (linkId: 7702944131447)';

-- Table: prescription
-- Donn√©es de prescription m√©dicamenteuse
CREATE TABLE IF NOT EXISTS prescription (
    prescription_id BIGSERIAL PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    
    prescripteur VARCHAR(50),
    -- Identification m√©dicament (linkId: 817801935685)
    denomination VARCHAR(255),
    code_atc VARCHAR(20),
    
    -- D√©tails administration
    voie_administration VARCHAR(100),
        
    -- Informations temporelles
    date_prescription DATE,
    date_debut_prescription DATE,
    date_fin_prescription DATE,

    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE prescription IS 'Donn√©es de prescription m√©dicamenteuse avec codage ATC pour pharmacovigilance et recherche clinique, supportant m√©dicaments prescrits (linkId: 817801935685)';

-- Table: posologie
-- Informations de dosage d√©taill√©es (linkId: 6348237104421)
CREATE TABLE IF NOT EXISTS posologie (
    posologie_id BIGSERIAL PRIMARY KEY,
    prescription_id BIGINT NOT NULL,
    
    -- D√©tails posologie, √† enrichir+++
    nombre_prises_par_jour INTEGER,
    quantite DECIMAL(10,3),
    unite_quantite VARCHAR(20),
    date_heure_debut TIMESTAMP,
    date_heure_fin TIMESTAMP,
    
    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE posologie IS 'Informations de dosage d√©taill√©es pour m√©dicaments (linkId: 6348237104421)';

-- Table: administration
-- Donn√©es d'exposition m√©dicamenteuse
CREATE TABLE IF NOT EXISTS administration (
    administration_id BIGSERIAL PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    prescription_id BIGINT,
    
    -- Identification m√©dicament (linkId: 817801935685)
    denomination VARCHAR(255),
    code_atc VARCHAR(20),
    
    -- D√©tails administration
    voie_administration VARCHAR(100),
    
    -- Informations quantit√©
    quantite DECIMAL(10,3),
    unite_quantite VARCHAR(20),

    -- Informations temporelles
    date_heure_debut TIMESTAMP,
    date_heure_fin TIMESTAMP,
    
    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE administration IS 'Donn√©es d''exposition m√©dicamenteuse avec codage ATC pour pharmacovigilance et recherche clinique, supportant m√©dicaments administr√©s (linkId: 817801935685)';

-- Table: dossier_soins
-- Mesures et observations de soins cliniques
-- Bas√© sur linkId: 305831246173 (Dossier de soins) - repeats=true
CREATE TABLE IF NOT EXISTS dossier_soins (
    soin_id BIGSERIAL PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    
    -- Mesures physiques (linkId: 305831246173)
    code_loinc VARCHAR(20),
    libelle_test VARCHAR(255),

    valeur DECIMAL(15,6),
    unite VARCHAR(50),
    valeur_code VARCHAR(50),
    valeur_texte TEXT,

    date_mesure DATE,
    
    -- Contexte mesure
    unite_soins VARCHAR(255), -- Pas dans le socle
    professionnel VARCHAR(255), -- Pas dans le socle
    
    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE dossier_soins IS 'Mesures et observations de soins cliniques incluant signes vitaux, mesures physiques, et donn√©es de soins infirmiers (linkId: 305831246173)';

-- Table: style_vie
-- Informations de style de vie consolid√©es (linkId: 1693164086678)
CREATE TABLE IF NOT EXISTS style_vie (
    style_vie_id BIGSERIAL PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    
    -- Facteurs de style de vie
    consommation_tabac VARCHAR(100),
    consommation_alcool VARCHAR(100),
    consommation_autres_drogues VARCHAR(100),
    activite_physique VARCHAR(100),
    
    -- Contexte de collecte de donn√©es
    date_recueil DATE,
    
    -- Champs d'audit
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE style_vie IS 'Informations de style de vie consolid√©es incluant tabac, alcool, drogues, et activit√© physique (linkId: 1693164086678)';

\echo 'üîó Cr√©ation des contraintes et cl√©s √©trang√®res...'

-- ========================================================================
-- CONTRAINTES ET CL√âS √âTRANG√àRES
-- ========================================================================

-- Contraintes de cl√©s √©trang√®res
ALTER TABLE patient_adresse 
ADD CONSTRAINT fk_patient_patient_adresse
FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE;

ALTER TABLE donnees_pmsi 
ADD CONSTRAINT fk_donnees_pmsi_patient 
FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE;

ALTER TABLE diagnostics 
ADD CONSTRAINT fk_diagnostics_pmsi 
FOREIGN KEY (pmsi_id) REFERENCES donnees_pmsi(pmsi_id) ON DELETE CASCADE;
ALTER TABLE diagnostics 
ADD CONSTRAINT fk_diagnostics_patient 
FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE;

ALTER TABLE actes 
ADD CONSTRAINT fk_actes_pmsi 
FOREIGN KEY (pmsi_id) REFERENCES donnees_pmsi(pmsi_id) ON DELETE CASCADE;
ALTER TABLE actes 
ADD CONSTRAINT fk_actes_patient 
FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE;

ALTER TABLE biologie 
ADD CONSTRAINT fk_biologie_patient 
FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE;

ALTER TABLE dossier_soins 
ADD CONSTRAINT fk_dossier_soins_patient 
FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE;

ALTER TABLE prescription 
ADD CONSTRAINT fk_prescription_patient 
FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE;

ALTER TABLE posologie 
ADD CONSTRAINT fk_posologie_prescription 
FOREIGN KEY (prescription_id) REFERENCES prescription(prescription_id) ON DELETE CASCADE;

ALTER TABLE administration 
ADD CONSTRAINT fk_administration_patient 
FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE;

ALTER TABLE administration 
ADD CONSTRAINT fk_administration_prescription 
FOREIGN KEY (prescription_id) REFERENCES prescription(prescription_id);

ALTER TABLE style_vie 
ADD CONSTRAINT fk_style_vie_patient 
FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE;

\echo '‚úÖ Contraintes de cl√©s √©trang√®res cr√©√©es'

-- Contraintes de v√©rification pour qualit√© des donn√©es
ALTER TABLE patient 
ADD CONSTRAINT chk_patient_sexe 
CHECK (sexe IN ('h', 'f'));

ALTER TABLE patient 
ADD CONSTRAINT chk_patient_date_naissance 
CHECK (date_naissance <= CURRENT_DATE AND date_naissance >= '1900-01-01');

ALTER TABLE patient 
ADD CONSTRAINT chk_patient_date_deces 
CHECK (date_deces IS NULL OR (date_deces >= date_naissance AND date_deces <= CURRENT_DATE));

ALTER TABLE patient 
ADD CONSTRAINT chk_patient_nir_format 
CHECK (nir IS NULL OR (nir ~ '^[0-9]{13,15}$'));

ALTER TABLE patient 
ADD CONSTRAINT chk_patient_rang_gemellaire 
CHECK (rang_gemellaire IS NULL OR rang_gemellaire BETWEEN 1 AND 10);

ALTER TABLE patient_adresse
ADD CONSTRAINT chk_patient_latitude 
CHECK (latitude BETWEEN -90 AND 90);

ALTER TABLE patient_adresse
ADD CONSTRAINT chk_patient_longitude 
CHECK (longitude BETWEEN -180 AND 180);

ALTER TABLE donnees_pmsi 
ADD CONSTRAINT chk_pmsi_dates 
CHECK (date_fin_sejour >= date_debut_sejour);

ALTER TABLE biologie 
ADD CONSTRAINT chk_biologie_bornes 
CHECK (borne_sup_normale IS NULL OR borne_inf_normale IS NULL OR borne_sup_normale >= borne_inf_normale);

ALTER TABLE biologie
ADD CONSTRAINT chk_biologie_type_examen
CHECK (type_examen IN ('fonction_renale', 'bilan_hepatique', 'hemogramme', 'autres'));

ALTER TABLE biologie
ADD CONSTRAINT chk_biologie_valeur_positive
CHECK (valeur IS NULL OR valeur >= 0);

ALTER TABLE biologie
ADD CONSTRAINT chk_biologie_date_prelevement
CHECK (date_prelevement IS NULL OR date_prelevement <= CURRENT_TIMESTAMP);

ALTER TABLE biologie
ADD CONSTRAINT chk_biologie_statut_validation
CHECK (statut_validation IS NULL OR statut_validation IN ('en_attente', 'valide', 'rejete', 'en_cours'));

ALTER TABLE prescription
ADD CONSTRAINT chk_prescription_dates
CHECK (date_fin_prescription IS NULL OR date_debut_prescription IS NULL OR date_fin_prescription >= date_debut_prescription);

ALTER TABLE administration
ADD CONSTRAINT chk_administration_dates
CHECK (date_heure_fin IS NULL OR date_heure_debut IS NULL OR date_heure_fin >= date_heure_debut);

ALTER TABLE administration
ADD CONSTRAINT chk_administration_quantite
CHECK (quantite IS NULL OR quantite > 0);

ALTER TABLE donnees_pmsi
ADD CONSTRAINT chk_pmsi_age_admission
CHECK (age_admission IS NULL OR age_admission BETWEEN 0 AND 150);

ALTER TABLE posologie
ADD CONSTRAINT chk_posologie_prises_jour
CHECK (nombre_prises_par_jour IS NULL OR nombre_prises_par_jour BETWEEN 1 AND 24);

ALTER TABLE posologie
ADD CONSTRAINT chk_posologie_quantite
CHECK (quantite IS NULL OR quantite > 0);

ALTER TABLE posologie
ADD CONSTRAINT chk_posologie_dates
CHECK (date_heure_fin IS NULL OR date_heure_debut IS NULL OR date_heure_fin >= date_heure_debut);

ALTER TABLE dossier_soins
ADD CONSTRAINT chk_soins_valeur_positive
CHECK (valeur IS NULL OR valeur >= 0);

ALTER TABLE dossier_soins
ADD CONSTRAINT chk_soins_date_mesure
CHECK (date_mesure IS NULL OR date_mesure <= CURRENT_DATE);

ALTER TABLE style_vie
ADD CONSTRAINT chk_style_vie_date_recueil
CHECK (date_recueil IS NULL OR date_recueil <= CURRENT_DATE);

-- Contraintes de validation suppl√©mentaires
ALTER TABLE diagnostics
ADD CONSTRAINT chk_diagnostics_code_format
CHECK (code_diagnostic IS NULL OR LENGTH(code_diagnostic) BETWEEN 3 AND 20);

ALTER TABLE diagnostics
ADD CONSTRAINT chk_diagnostics_date_recueil
CHECK (date_recueil IS NULL OR date_recueil <= CURRENT_DATE);

ALTER TABLE actes
ADD CONSTRAINT chk_actes_code_format
CHECK (code_acte IS NULL OR LENGTH(code_acte) BETWEEN 4 AND 20);

ALTER TABLE actes
ADD CONSTRAINT chk_actes_date_acte
CHECK (date_acte IS NULL OR date_acte <= CURRENT_TIMESTAMP);

ALTER TABLE actes
ADD CONSTRAINT chk_actes_date_recueil
CHECK (date_recueil IS NULL OR date_recueil <= CURRENT_DATE);

\echo '‚úÖ Contraintes de validation cr√©√©es'

\echo 'üìä Cr√©ation des index pour optimisation des performances...'

-- ========================================================================
-- INDEX POUR OPTIMISATION DES PERFORMANCES
-- ========================================================================

-- Index de recherche principaux sur table patient avec support fran√ßais
CREATE INDEX IF NOT EXISTS idx_patient_nir ON patient(nir) WHERE nir IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_patient_ins ON patient(ins) WHERE ins IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_patient_nom_prenom ON patient(nom, prenom);
CREATE INDEX IF NOT EXISTS idx_patient_date_naissance ON patient(date_naissance);

-- Index donnees_PMSI
CREATE INDEX IF NOT EXISTS idx_pmsi_patient_id ON donnees_pmsi(patient_id);
CREATE INDEX IF NOT EXISTS idx_pmsi_date_debut ON donnees_pmsi(date_debut_sejour);
CREATE INDEX IF NOT EXISTS idx_pmsi_date_fin ON donnees_pmsi(date_fin_sejour);
CREATE INDEX IF NOT EXISTS idx_pmsi_etablissement ON donnees_pmsi(etablissement);

-- Index diagnostiques
CREATE INDEX IF NOT EXISTS idx_diagnostics_pmsi_id ON diagnostics(pmsi_id);
CREATE INDEX IF NOT EXISTS idx_diagnostics_code ON diagnostics(code_diagnostic);
CREATE INDEX IF NOT EXISTS idx_diagnostics_type ON diagnostics(type_diagnostic);

-- Index proc√©dures/actes
CREATE INDEX IF NOT EXISTS idx_actes_pmsi_id ON actes(pmsi_id);
CREATE INDEX IF NOT EXISTS idx_actes_code ON actes(code_acte);
CREATE INDEX IF NOT EXISTS idx_actes_date ON actes(date_acte);
CREATE INDEX IF NOT EXISTS idx_actes_date_recueil ON actes(date_recueil);

-- Index r√©sultats laboratoire - optimis√©s pour table consolid√©e
CREATE INDEX IF NOT EXISTS idx_biologie_patient_id ON biologie(patient_id);
CREATE INDEX IF NOT EXISTS idx_biologie_code_loinc ON biologie(code_loinc);
CREATE INDEX IF NOT EXISTS idx_biologie_type_examen ON biologie(type_examen);
CREATE INDEX IF NOT EXISTS idx_biologie_date_prelevement ON biologie(date_prelevement);
CREATE INDEX IF NOT EXISTS idx_biologie_statut_validation ON biologie(statut_validation);

-- Index prescriptions
CREATE INDEX IF NOT EXISTS idx_prescription_patient_id ON prescription(patient_id);
CREATE INDEX IF NOT EXISTS idx_prescription_code_atc ON prescription(code_atc);
CREATE INDEX IF NOT EXISTS idx_prescription_date_prescription ON prescription(date_prescription);

-- Index administrations
CREATE INDEX IF NOT EXISTS idx_administration_patient_id ON administration(patient_id);
CREATE INDEX IF NOT EXISTS idx_administration_code_atc ON administration(code_atc);
CREATE INDEX IF NOT EXISTS idx_administration_denomination ON administration(denomination);
CREATE INDEX IF NOT EXISTS idx_administration_date_heure_debut ON administration(date_heure_debut);

-- Index soins cliniques
CREATE INDEX IF NOT EXISTS idx_soins_patient_id ON dossier_soins(patient_id);
CREATE INDEX IF NOT EXISTS idx_soins_loinc ON dossier_soins(code_loinc);
CREATE INDEX IF NOT EXISTS idx_soins_date_mesure ON dossier_soins(date_mesure);

-- Index composites pour requ√™tes communes
CREATE INDEX IF NOT EXISTS idx_biologie_patient_loinc ON biologie(patient_id, code_loinc);
CREATE INDEX IF NOT EXISTS idx_biologie_patient_type ON biologie(patient_id, type_examen);
CREATE INDEX IF NOT EXISTS idx_prescription_patient_atc ON prescription(patient_id, code_atc);
CREATE INDEX IF NOT EXISTS idx_pmsi_patient_date ON donnees_pmsi(patient_id, date_debut_sejour);
CREATE INDEX IF NOT EXISTS idx_diagnostics_pmsi_code ON diagnostics(pmsi_id, code_diagnostic);
CREATE INDEX IF NOT EXISTS idx_actes_pmsi_code ON actes(pmsi_id, code_acte);

-- Index g√©ographiques/spatiaux optimis√©s pour PostgreSQL 16.x
CREATE INDEX IF NOT EXISTS idx_patient_coords_gist ON patient_adresse USING gist(point(longitude, latitude)) WHERE latitude IS NOT NULL AND longitude IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_patient_adresse_iris ON patient_adresse(code_iris) WHERE code_iris IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_patient_adresse_date ON patient_adresse(patient_id, date_recueil DESC);

-- Index partiels pour performance
CREATE INDEX IF NOT EXISTS idx_biologie_valeur_non_null ON biologie(valeur) WHERE valeur IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_prescription_active ON prescription(patient_id, date_debut_prescription, date_fin_prescription) 
WHERE date_debut_prescription IS NOT NULL;

-- Index de performance suppl√©mentaires pour PostgreSQL 16.x avec support fran√ßais
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_patient_search ON patient USING gin(to_tsvector('french', COALESCE(nom, '') || ' ' || COALESCE(prenom, '')));
CREATE INDEX IF NOT EXISTS idx_biologie_date_patient ON biologie(date_prelevement DESC, patient_id) WHERE date_prelevement IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_pmsi_duree_sejour ON donnees_pmsi((date_fin_sejour - date_debut_sejour)) WHERE date_debut_sejour IS NOT NULL AND date_fin_sejour IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_diagnostics_patient_code ON diagnostics(patient_id, code_diagnostic, date_recueil);
CREATE INDEX IF NOT EXISTS idx_actes_patient_code ON actes(patient_id, code_acte, date_acte);
CREATE INDEX IF NOT EXISTS idx_prescription_period ON prescription(date_debut_prescription, date_fin_prescription) WHERE date_debut_prescription IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_administration_timeline ON administration(patient_id, date_heure_debut DESC) WHERE date_heure_debut IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_dossier_soins_timeline ON dossier_soins(patient_id, date_mesure DESC) WHERE date_mesure IS NOT NULL;

-- Index hash pour recherches exactes (optimisation PostgreSQL 16.x)
CREATE INDEX IF NOT EXISTS idx_patient_nir_hash ON patient USING hash(nir) WHERE nir IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_patient_ins_hash ON patient USING hash(ins) WHERE ins IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_biologie_loinc_hash ON biologie USING hash(code_loinc) WHERE code_loinc IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_prescription_atc_hash ON prescription USING hash(code_atc) WHERE code_atc IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_administration_atc_hash ON administration USING hash(code_atc) WHERE code_atc IS NOT NULL;

-- Index couvrants pour requ√™tes communes
CREATE INDEX IF NOT EXISTS idx_biologie_covering ON biologie(patient_id, code_loinc, date_prelevement) INCLUDE (valeur, unite, valeur_texte);
CREATE INDEX IF NOT EXISTS idx_prescription_covering ON prescription(patient_id, code_atc) INCLUDE (denomination, date_debut_prescription, date_fin_prescription);
CREATE INDEX IF NOT EXISTS idx_pmsi_covering ON donnees_pmsi(patient_id, date_debut_sejour) INCLUDE (date_fin_sejour, etablissement, service);

\echo '‚úÖ Index de performance cr√©√©s'

\echo 'üìù Ajout des commentaires de colonnes...'

-- ========================================================================
-- COMMENTAIRES DE COLONNES
-- ========================================================================

-- Commentaires colonnes table patient
COMMENT ON COLUMN patient.nom IS 'Nom patient (linkId: 8605698058770)';
COMMENT ON COLUMN patient.prenom IS 'Pr√©nom patient (linkId: 6214879623503)';
COMMENT ON COLUMN patient.nir IS 'Num√©ro inscription au R√©pertoire - NIR (linkId: 5711960356160)';
COMMENT ON COLUMN patient.ins IS 'Identit√© Nationale de Sant√© - INS (linkId: 3764723550987)';
COMMENT ON COLUMN patient.date_naissance IS 'Date de naissance (linkId: 5036133558154)';
COMMENT ON COLUMN patient.sexe IS 'Sexe consolid√© depuis PMSI (linkId: 3894630481120)';
COMMENT ON COLUMN patient.date_deces IS 'Date de d√©c√®s (linkId: 5633552097315)';
COMMENT ON COLUMN patient.source_deces IS 'Source de la date de d√©c√®s (linkId: 9098810065693)';
COMMENT ON COLUMN patient.rang_gemellaire IS 'Rang g√©mellaire du b√©n√©ficiaire (linkId: 6931296968515)';
COMMENT ON COLUMN patient_adresse.latitude IS 'Latitude du domicile patient (linkId: 3709843054556)';
COMMENT ON COLUMN patient_adresse.longitude IS 'Longitude du domicile patient (linkId: 7651448032665)';

-- Commentaires colonnes table biologie
COMMENT ON COLUMN biologie.code_loinc IS 'Code LOINC identifiant le test biologique';
COMMENT ON COLUMN biologie.type_examen IS 'Type examen: fonction_renale, bilan_hepatique, hemogramme, autres';
COMMENT ON COLUMN biologie.date_prelevement IS 'Date et heure du pr√©l√®vement';
COMMENT ON COLUMN biologie.borne_inf_normale IS 'Borne inf√©rieure de normalit√©';
COMMENT ON COLUMN biologie.borne_sup_normale IS 'Borne sup√©rieure de normalit√©';

\echo '‚úÖ Commentaires ajout√©s'

\echo 'üß™ Tests de validation du sch√©ma fran√ßais...'

-- ========================================================================
-- TESTS DE VALIDATION FRAN√áAISE
-- ========================================================================

-- Test d'insertion de donn√©es fran√ßaises
DO $$
BEGIN
    -- Test caract√®res fran√ßais
    INSERT INTO patient (nom, prenom, sexe, date_naissance) 
    VALUES ('M√ºller', 'Fran√ßois-Jos√©', 'h', '1985-12-25');
    
    INSERT INTO patient (nom, prenom, sexe, date_naissance)
    VALUES ('C≈ìur', 'Esm√©e', 'f', '1992-07-14');
    
    RAISE NOTICE '‚úÖ Test insertion caract√®res fran√ßais r√©ussi';
    
    -- Test tri fran√ßais
    IF (SELECT COUNT(*) FROM patient ORDER BY nom COLLATE "fr_FR") >= 2 THEN
        RAISE NOTICE '‚úÖ Test tri fran√ßais r√©ussi';
    END IF;
    
    -- Nettoyage test
    DELETE FROM patient WHERE nom IN ('M√ºller', 'C≈ìur');
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Probl√®me avec tests fran√ßais: %', SQLERRM;
END
$$;

-- Fonction de validation du sch√©ma
CREATE OR REPLACE FUNCTION validate_ehr_schema()
RETURNS TABLE(
    table_name text,
    table_exists boolean,
    row_count bigint,
    has_french_support boolean
)
LANGUAGE plpgsql
AS $$
DECLARE
    rec record;
BEGIN
    FOR rec IN 
        SELECT t.table_name
        FROM information_schema.tables t
        WHERE t.table_schema = 'public' 
        AND t.table_type = 'BASE TABLE'
        AND t.table_name IN ('patient', 'patient_adresse', 'donnees_pmsi', 'diagnostics', 
                            'actes', 'biologie', 'prescription', 'posologie', 
                            'administration', 'dossier_soins', 'style_vie')
        ORDER BY t.table_name
    LOOP
        EXECUTE format('SELECT COUNT(*) FROM %I', rec.table_name) INTO row_count;
        
        RETURN QUERY
        SELECT 
            rec.table_name::text,
            true::boolean,
            row_count,
            true::boolean; -- Support fran√ßais toujours activ√©
    END LOOP;
    
    RETURN;
END
$$;

COMMENT ON FUNCTION validate_ehr_schema() IS 'Fonction de validation du sch√©ma EHR avec support fran√ßais';

-- Affichage des r√©sultats de validation
\echo ''
\echo '=== VALIDATION DU SCH√âMA EHR ==='
SELECT * FROM validate_ehr_schema();

\echo ''
\echo '=== R√âSUM√â DE LA CONFIGURATION ==='
SELECT 
    current_database() as "Base de donn√©es",
    current_user as "Utilisateur",
    (SELECT setting FROM pg_settings WHERE name = 'server_encoding') as "Encodage serveur",
    (SELECT setting FROM pg_settings WHERE name = 'lc_collate') as "Collation",
    (SELECT setting FROM pg_settings WHERE name = 'default_text_search_config') as "Config recherche"
;

\echo ''
\echo '=== TABLES CR√â√âES ==='
SELECT 
    schemaname as "Sch√©ma",
    tablename as "Table", 
    tableowner as "Propri√©taire"
FROM pg_tables 
WHERE schemaname = 'public' 
ORDER BY tablename;

\echo ''
\echo '‚úÖ Cr√©ation du sch√©ma EHR termin√©e avec succ√®s!'
\echo 'üá´üá∑ Support fran√ßais complet: UTF-8, collation fran√ßaise, recherche textuelle'
\echo 'üè• Sch√©ma pr√™t pour donn√©es de sant√© FHIR avec optimisations PostgreSQL 16'
\echo 'üìä ' || (SELECT COUNT(*) FROM pg_tables WHERE schemaname = 'public') || ' tables cr√©√©es'
\echo 'üîó ' || (SELECT COUNT(*) FROM pg_constraint WHERE contype = 'f') || ' contraintes de cl√©s √©trang√®res'
\echo 'üìà ' || (SELECT COUNT(*) FROM pg_indexes WHERE schemaname = 'public') || ' index de performance'

-- ========================================================================
-- FIN DU SCRIPT DE CR√âATION DES TABLES EHR
-- ========================================================================