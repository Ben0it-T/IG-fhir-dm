# HAPI FHIR Alerting Rules for Prometheus

groups:
  - name: hapi-fhir-alerts
    rules:
      # HAPI FHIR Service Health
      - alert: HapiFhirDown
        expr: up{job="hapi-fhir"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "HAPI FHIR server is down"
          description: "HAPI FHIR server has been down for more than 1 minute"

      # High Response Time
      - alert: HapiFhirHighResponseTime
        expr: histogram_quantile(0.95, rate(http_server_requests_seconds_bucket{job="hapi-fhir"}[5m])) > 2
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "HAPI FHIR high response time"
          description: "95th percentile response time is {{ $value }} seconds"

      # High Error Rate
      - alert: HapiFhirHighErrorRate
        expr: rate(http_server_requests_total{job="hapi-fhir",status=~"5.."}[5m]) > 0.1
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "HAPI FHIR high error rate"
          description: "Error rate is {{ $value }} errors per second"

      # Database Connection Issues
      - alert: HapiFhirDatabaseConnections
        expr: hikaricp_connections_active{job="hapi-fhir"} / hikaricp_connections_max{job="hapi-fhir"} > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "HAPI FHIR database connection pool nearly exhausted"
          description: "Database connection pool usage is {{ $value | humanizePercentage }}"

      # JVM Memory Usage
      - alert: HapiFhirHighMemoryUsage
        expr: jvm_memory_used_bytes{job="hapi-fhir",area="heap"} / jvm_memory_max_bytes{job="hapi-fhir",area="heap"} > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "HAPI FHIR high memory usage"
          description: "JVM heap memory usage is {{ $value | humanizePercentage }}"

      # High CPU Usage
      - alert: HapiFhirHighCpuUsage
        expr: process_cpu_usage{job="hapi-fhir"} > 0.8
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "HAPI FHIR high CPU usage"
          description: "CPU usage is {{ $value | humanizePercentage }}"

      # GC Time
      - alert: HapiFhirHighGcTime
        expr: rate(jvm_gc_pause_seconds_sum{job="hapi-fhir"}[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "HAPI FHIR high GC time"
          description: "Garbage collection time is {{ $value }} seconds per second"

  - name: postgresql-alerts
    rules:
      # PostgreSQL Down
      - alert: PostgreSQLDown
        expr: up{job="postgres"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "PostgreSQL server is down"
          description: "PostgreSQL server has been down for more than 1 minute"

      # High Connection Usage
      - alert: PostgreSQLHighConnections
        expr: pg_stat_database_numbackends{job="postgres"} / pg_settings_max_connections{job="postgres"} > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "PostgreSQL high connection usage"
          description: "Connection usage is {{ $value | humanizePercentage }}"

      # Slow Queries
      - alert: PostgreSQLSlowQueries
        expr: rate(pg_stat_statements_mean_time_ms{job="postgres"}[5m]) > 1000
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "PostgreSQL slow queries detected"
          description: "Mean query time is {{ $value }}ms"

      # High Database Size
      - alert: PostgreSQLHighDatabaseSize
        expr: pg_database_size_bytes{job="postgres"} > 10e9  # 10GB
        for: 5m
        labels:
          severity: info
        annotations:
          summary: "PostgreSQL database size is large"
          description: "Database size is {{ $value | humanizeBytes }}"

      # Replication Lag (if using replication)
      # - alert: PostgreSQLReplicationLag
      #   expr: pg_stat_replication_lag_seconds{job="postgres"} > 30
      #   for: 1m
      #   labels:
      #     severity: warning
      #   annotations:
      #     summary: "PostgreSQL replication lag"
      #     description: "Replication lag is {{ $value }} seconds"

  - name: system-alerts
    rules:
      # Disk Space
      - alert: HighDiskUsage
        expr: (node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes < 10
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "High disk usage"
          description: "Disk usage is above 90% on {{ $labels.mountpoint }}"

      # Container restart
      - alert: ContainerRestarted
        expr: increase(container_start_time_seconds[1h]) > 3
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: "Container restarted"
          description: "Container {{ $labels.name }} has been restarted {{ $value }} times in the last hour"